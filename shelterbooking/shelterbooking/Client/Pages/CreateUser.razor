@page "/createuser"
@inject HttpClient Http
@inject IJSRuntime js
@using System.Net.Http
@inject NavigationManager uriHelper
@using shelterbooking.Shared 

<h3>CreateUser</h3>

<p>
    Fornavn:
    <input placeholder="Fornavn" @bind="fornavn" />
    <br />
    Efternavn:
    <input placeholder="Efternavn" @bind="efternavn" />
    <br />
    Mobil:
    <input placeholder="Mobilnummer" @bind="mobil" />
    <br />
    Email:
    <input placeholder="Email" @bind="email" />
    <br />
    Password:
    <input placeholder="Password" @bind="password" />
    <br />
    <a class="btn btn-success" @onclick="CreateBruger">Create login</a>
</p>

@code {

    public string fornavn;
    public string efternavn;
    public string mobil;
    public string email;
    public string password;

    public Bruger[] users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<Bruger[]>("Brugere");
    }

    async Task CreateBruger()
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to create user {fornavn}?"))
        {
            foreach (var user in users)
            {
                if (user.email == email)
                {
                    await js.InvokeVoidAsync("alert", "Email is already in use");
                    break;
                }
                else if (user.email != email && !string.IsNullOrEmpty(fornavn) && !string.IsNullOrEmpty(efternavn) && !string.IsNullOrEmpty(mobil) && !string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(password))
                {
                    await Http.PostAsJsonAsync("api/brugere", new Bruger(fornavn, efternavn, mobil, email, password));
                    await js.InvokeVoidAsync("alert", $"Created successfully!");
                    uriHelper.NavigateTo("/");
                    break;
                }
            }

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Pls fill out all fields correctly");
        }


    }
}