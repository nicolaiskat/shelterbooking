@page "/pedelside"
@using shelterbooking.Shared
@inject HttpClient Http

<h1>Pedel side</h1>

@if (shelters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="getSheltersList">Se Shelters</button>
    <button class="btn btn-primary" @onclick="getBookingsList">Se bookings</button>
    <br/>
    if (typeList == 1)
    {
        <h2>Liste af alle shelters</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Shelterplads</th>
                    <th>Funktioner</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                    </td>
                </tr>
                @foreach (var shelter in shelters)
                {
                    <tr>
                        <td>
                            <b>Navn:</b> @shelter.properties.navn
                            <br />
                            <b>Beskrivelse:</b> @shelter.properties.beskrivels
                            <br />
                            <b>Kommune:</b> @shelter.properties.cvr_navn
                            <br />
                            <b>Antal pladser:</b> @shelter.properties.antal_pl
                            <br />
                            <b>Ledig:</b> Yes
                            <br />
                            <b>Ansvarlig:</b> @shelter.properties.ansva_v
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => getBookings(shelter._id)">Se bookings</button>
                            <button class="btn btn-primary" @onclick="() => updateShelter(shelter._id)">Ret shelter</button>
                            <button class="btn btn-primary" @onclick="() => deleteShelter(shelter._id)">Slet shelter</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (typeList == 2)
    {
        <h2>Liste af alle bookings</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Booking</th>
                    <th>Funktioner</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                    </td>
                </tr>
                @foreach (var booking in shelters)
                {
                    <tr>
                        <td>
                            booking eks.
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => getShelter(booking._id)">Se bookings</button>
                            <button class="btn btn-primary" @onclick="() => updateBooking(booking._id)">Ret shelter</button>
                            <button class="btn btn-primary" @onclick="() => deleteBooking(booking._id)">Slet shelter</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}

@code {
    private Shelter[] shelters;
    private Booking[] bookings;

    protected override async Task OnInitializedAsync()
    {
        shelters = await Http.GetFromJsonAsync<Shelter[]>("SheltersList");
    }

    public int typeList = 1;
    public void getSheltersList()
    {
        typeList = 1;
    }
    public void getBookingsList()
    {
        typeList = 2;
    }

    public void getBookings(string id)
    {

    }
    public void updateShelter(string id)
    {

    }
    public void deleteShelter(string id)
    {

    }
    public void getShelter(string id)
    {

    }
    public void updateBooking(string id)
    {

    }
    public void deleteBooking(string id)
    {

    }

    public List<Shelter> shelterToList()
    {
        List<Shelter> items = new();
        foreach (var shelter in shelters)
        {
            items.Add(shelter);
        };
        return items;
    }
    private List<Shelter> GetFilteretItems(string name, int antal_pl_min, int antal_pl_max, string kommune)
    {
        List<Shelter> unfilteretItems = shelterToList();
        List<Shelter> filteretItems = shelterToList();

        if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_min > 0 && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_min > 0 && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (antal_pl_min > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower())
                );
        }
        else if (antal_pl_min > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min
                );
        }
        else if (antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        return filteretItems;
    }


}
