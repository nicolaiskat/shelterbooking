@page "/pedelside"
@using shelterbooking.Shared
@inject HttpClient Http
@inject IJSRuntime js
@using System.Net.Http
@inject NavigationManager uriHelper



<h1>Pedel side</h1>

@if (shelters == null || bookings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success" @onclick="getSheltersList">Se Shelters</button>
    <button class="btn btn-success" @onclick="getBookingsList">Se bookings</button>
    <br />
    if (typeList == 1)
    {
        <h2>Liste af alle shelters</h2>
        <a href="https://localhost:5001/shelter/create">Opret shelter</a>
        <p>
            <b>SÃ¸gekriterier: </b>
        </p>
        <p><b>Navn: </b><input placeholder="Shelter plads" @bind="shelternavn" /></p>
        <p><b>Antal pladser: </b><input placeholder="Antal pladser min" @bind="antal_min" /> - <input placeholder="Antal pladser max" @bind="antal_max" /></p>
        <p><b>Kommunenavn: </b><input placeholder="Kommunenavn" @bind="kom" /></p>


        <table class="table">
            <thead>
                <tr>
                    <th>Shelterplads</th>
                    <th>Funktioner</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                    </td>
                </tr>
                @foreach (var shelter in GetFilteretItems(shelternavn, antal_min, antal_max, kom))
                {
                    <tr>
                        <td>
                            <b>Navn:</b> @shelter.properties.navn
                            <br />
                            <b>Beskrivelse:</b> @shelter.properties.beskrivels
                            <br />
                            <b>Kommune:</b> @shelter.properties.cvr_navn
                            <br />
                            <b>Antal pladser:</b> @shelter.properties.antal_pl
                            <br />
                            <b>Ledig:</b> Yes
                            <br />
                            <b>Ansvarlig:</b> @shelter.properties.ansva_v
                        </td>
                        <td>
                            <button class="btn btn-success">Se bookings</button>
                            <br />
                            <a class="btn btn-success" href='@string.Format("https://localhost:5001/shelter/edit/{0}", shelter._id)'>Ret shelter</a>
                            <br />
                            <button class="btn btn-success" @onclick="() => ShelDelete(shelter._id)">Slet shelter</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (typeList == 2)
    {
        <h2>Liste af alle bookings</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Booking</th>
                    <th>Funktioner</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                    </td>
                </tr>
                @foreach (var booking in bookings)
                {
                    <tr>
                        <td>
                            <b>Booking id:</b> @booking._id
                            <br />
                            <b>Shelter navn:</b> @getShelterNavn(booking.shelter_id)
                            <br />
                            <b>Fulde navn:</b> @booking.fuldenavn
                            <br />
                            <b>Telefon:</b> @booking.telefon
                            <br />
                            <b>Kommentare:</b> @booking.kommentar
                            <br />
                            <b>Start dato:</b> @booking.startdato
                            <br />
                            <b>Slut dato:</b> @booking.slutdato
                        </td>
                        <td>
                            <a class="btn btn-success" href='@string.Format("https://localhost:5001/booking/edit/{0}", booking._id)'>Ret booking</a>
                            <br />
                            <button class="btn btn-success" @onclick="() => BookDelete(booking._id)">Slet booking</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private Shelter[] shelters;
    private Booking[] bookings;

    protected override async Task OnInitializedAsync()
    {
        shelters = await Http.GetFromJsonAsync<Shelter[]>("SheltersList");
        bookings = await Http.GetFromJsonAsync<Booking[]>("BookingsList");
    }

    async Task ShelDelete(string shelId)
    {
        var shel = shelters.First(x => x._id == shelId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete shelter {shel.properties.navn}?"))
        {
            await Http.DeleteAsync($"api/shelters/{shelId}");
            await OnInitializedAsync();
        }
    }
    async Task BookDelete(string bookId)
    {
        var book = bookings.First(x => x._id == bookId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete this booking {book._id} for {book.fuldenavn}?"))
        {
            await Http.DeleteAsync($"api/bookings/{bookId}");
            await OnInitializedAsync();
        }
    }

    public string shelternavn;
    public string kom;
    public string antal_min;
    public string antal_max;
    public int typeList = 1;

    public void getSheltersList()
    {
        typeList = 1;
    }
    public void getBookingsList()
    {
        typeList = 2;
    }
    public string updateShelter(string id)
    {
        return id;
    }
    public string getShelterNavn(string id)
    {
        foreach (var shel in shelters)
        {
            if(shel._id == id)
            {
                return shel.properties.navn;
            }
        }
        return "ukendt navn";
    }

    public List<Shelter> shelterToList()
    {
        List<Shelter> items = new();
        foreach (var shelter in shelters)
        {
            items.Add(shelter);
        };
        return items;
    }
    private List<Shelter> GetFilteretItems(string name, string antal_pl_min_s, string antal_pl_max_s, string kommune)
    {
        List<Shelter> unfilteretItems = shelterToList();
        List<Shelter> filteretItems = shelterToList();
        int antal_pl_min = 0;
        int antal_pl_max = 0;
        if (!string.IsNullOrEmpty(antal_pl_min_s))
        {
            antal_pl_min = int.Parse(antal_pl_min_s);
        }
        if (!string.IsNullOrEmpty(antal_pl_max_s))
        {
            antal_pl_max = int.Parse(antal_pl_max_s);
        }

        if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_min > 0 && antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_min > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl >= antal_pl_min
                );
        }
        else if (!string.IsNullOrEmpty(name) && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower()) &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_min > 0 && antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (antal_pl_min > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (antal_pl_max > 0 && !string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl <= antal_pl_max &&
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        else if (!string.IsNullOrEmpty(name))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.navn.ToLower().Contains(name.ToLower())
                );
        }
        else if (antal_pl_min > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl >= antal_pl_min
                );
        }
        else if (antal_pl_max > 0)
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.antal_pl <= antal_pl_max
                );
        }
        else if (!string.IsNullOrEmpty(kommune))
        {
            filteretItems = unfilteretItems.FindAll(
                item =>
                item.properties.cvr_navn.ToLower().Contains(kommune.ToLower())
                );
        }
        return filteretItems;
    }


}
